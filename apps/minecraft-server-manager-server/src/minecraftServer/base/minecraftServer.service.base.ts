/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MinecraftServer as PrismaMinecraftServer,
  InstanceSpecification as PrismaInstanceSpecification,
} from "@prisma/client";

export class MinecraftServerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MinecraftServerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.minecraftServer.count(args);
  }

  async minecraftServers<T extends Prisma.MinecraftServerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MinecraftServerFindManyArgs>
  ): Promise<PrismaMinecraftServer[]> {
    return this.prisma.minecraftServer.findMany<Prisma.MinecraftServerFindManyArgs>(
      args
    );
  }
  async minecraftServer<T extends Prisma.MinecraftServerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MinecraftServerFindUniqueArgs>
  ): Promise<PrismaMinecraftServer | null> {
    return this.prisma.minecraftServer.findUnique(args);
  }
  async createMinecraftServer<T extends Prisma.MinecraftServerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MinecraftServerCreateArgs>
  ): Promise<PrismaMinecraftServer> {
    return this.prisma.minecraftServer.create<T>(args);
  }
  async updateMinecraftServer<T extends Prisma.MinecraftServerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MinecraftServerUpdateArgs>
  ): Promise<PrismaMinecraftServer> {
    return this.prisma.minecraftServer.update<T>(args);
  }
  async deleteMinecraftServer<T extends Prisma.MinecraftServerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MinecraftServerDeleteArgs>
  ): Promise<PrismaMinecraftServer> {
    return this.prisma.minecraftServer.delete(args);
  }

  async getInstanceSpecification(
    parentId: string
  ): Promise<PrismaInstanceSpecification | null> {
    return this.prisma.minecraftServer
      .findUnique({
        where: { id: parentId },
      })
      .instanceSpecification();
  }
}
