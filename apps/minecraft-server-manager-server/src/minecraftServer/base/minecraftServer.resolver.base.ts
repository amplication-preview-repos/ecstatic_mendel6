/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MinecraftServer } from "./MinecraftServer";
import { MinecraftServerCountArgs } from "./MinecraftServerCountArgs";
import { MinecraftServerFindManyArgs } from "./MinecraftServerFindManyArgs";
import { MinecraftServerFindUniqueArgs } from "./MinecraftServerFindUniqueArgs";
import { CreateMinecraftServerArgs } from "./CreateMinecraftServerArgs";
import { UpdateMinecraftServerArgs } from "./UpdateMinecraftServerArgs";
import { DeleteMinecraftServerArgs } from "./DeleteMinecraftServerArgs";
import { InstanceSpecification } from "../../instanceSpecification/base/InstanceSpecification";
import { MinecraftServerService } from "../minecraftServer.service";
@graphql.Resolver(() => MinecraftServer)
export class MinecraftServerResolverBase {
  constructor(protected readonly service: MinecraftServerService) {}

  async _minecraftServersMeta(
    @graphql.Args() args: MinecraftServerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MinecraftServer])
  async minecraftServers(
    @graphql.Args() args: MinecraftServerFindManyArgs
  ): Promise<MinecraftServer[]> {
    return this.service.minecraftServers(args);
  }

  @graphql.Query(() => MinecraftServer, { nullable: true })
  async minecraftServer(
    @graphql.Args() args: MinecraftServerFindUniqueArgs
  ): Promise<MinecraftServer | null> {
    const result = await this.service.minecraftServer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MinecraftServer)
  async createMinecraftServer(
    @graphql.Args() args: CreateMinecraftServerArgs
  ): Promise<MinecraftServer> {
    return await this.service.createMinecraftServer({
      ...args,
      data: {
        ...args.data,

        instanceSpecification: args.data.instanceSpecification
          ? {
              connect: args.data.instanceSpecification,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MinecraftServer)
  async updateMinecraftServer(
    @graphql.Args() args: UpdateMinecraftServerArgs
  ): Promise<MinecraftServer | null> {
    try {
      return await this.service.updateMinecraftServer({
        ...args,
        data: {
          ...args.data,

          instanceSpecification: args.data.instanceSpecification
            ? {
                connect: args.data.instanceSpecification,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MinecraftServer)
  async deleteMinecraftServer(
    @graphql.Args() args: DeleteMinecraftServerArgs
  ): Promise<MinecraftServer | null> {
    try {
      return await this.service.deleteMinecraftServer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => InstanceSpecification, {
    nullable: true,
    name: "instanceSpecification",
  })
  async getInstanceSpecification(
    @graphql.Parent() parent: MinecraftServer
  ): Promise<InstanceSpecification | null> {
    const result = await this.service.getInstanceSpecification(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
