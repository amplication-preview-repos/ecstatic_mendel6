/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MinecraftServerService } from "../minecraftServer.service";
import { MinecraftServerCreateInput } from "./MinecraftServerCreateInput";
import { MinecraftServer } from "./MinecraftServer";
import { MinecraftServerFindManyArgs } from "./MinecraftServerFindManyArgs";
import { MinecraftServerWhereUniqueInput } from "./MinecraftServerWhereUniqueInput";
import { MinecraftServerUpdateInput } from "./MinecraftServerUpdateInput";

export class MinecraftServerControllerBase {
  constructor(protected readonly service: MinecraftServerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MinecraftServer })
  async createMinecraftServer(
    @common.Body() data: MinecraftServerCreateInput
  ): Promise<MinecraftServer> {
    return await this.service.createMinecraftServer({
      data: {
        ...data,

        instanceSpecification: data.instanceSpecification
          ? {
              connect: data.instanceSpecification,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        instanceId: true,

        instanceSpecification: {
          select: {
            id: true,
          },
        },

        serverName: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MinecraftServer] })
  @ApiNestedQuery(MinecraftServerFindManyArgs)
  async minecraftServers(
    @common.Req() request: Request
  ): Promise<MinecraftServer[]> {
    const args = plainToClass(MinecraftServerFindManyArgs, request.query);
    return this.service.minecraftServers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,

        instanceSpecification: {
          select: {
            id: true,
          },
        },

        serverName: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MinecraftServer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async minecraftServer(
    @common.Param() params: MinecraftServerWhereUniqueInput
  ): Promise<MinecraftServer | null> {
    const result = await this.service.minecraftServer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,

        instanceSpecification: {
          select: {
            id: true,
          },
        },

        serverName: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MinecraftServer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMinecraftServer(
    @common.Param() params: MinecraftServerWhereUniqueInput,
    @common.Body() data: MinecraftServerUpdateInput
  ): Promise<MinecraftServer | null> {
    try {
      return await this.service.updateMinecraftServer({
        where: params,
        data: {
          ...data,

          instanceSpecification: data.instanceSpecification
            ? {
                connect: data.instanceSpecification,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          instanceId: true,

          instanceSpecification: {
            select: {
              id: true,
            },
          },

          serverName: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MinecraftServer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMinecraftServer(
    @common.Param() params: MinecraftServerWhereUniqueInput
  ): Promise<MinecraftServer | null> {
    try {
      return await this.service.deleteMinecraftServer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          instanceId: true,

          instanceSpecification: {
            select: {
              id: true,
            },
          },

          serverName: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
