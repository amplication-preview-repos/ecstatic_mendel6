/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InstanceSpecificationService } from "../instanceSpecification.service";
import { InstanceSpecificationCreateInput } from "./InstanceSpecificationCreateInput";
import { InstanceSpecification } from "./InstanceSpecification";
import { InstanceSpecificationFindManyArgs } from "./InstanceSpecificationFindManyArgs";
import { InstanceSpecificationWhereUniqueInput } from "./InstanceSpecificationWhereUniqueInput";
import { InstanceSpecificationUpdateInput } from "./InstanceSpecificationUpdateInput";
import { MinecraftServerFindManyArgs } from "../../minecraftServer/base/MinecraftServerFindManyArgs";
import { MinecraftServer } from "../../minecraftServer/base/MinecraftServer";
import { MinecraftServerWhereUniqueInput } from "../../minecraftServer/base/MinecraftServerWhereUniqueInput";

export class InstanceSpecificationControllerBase {
  constructor(protected readonly service: InstanceSpecificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InstanceSpecification })
  async createInstanceSpecification(
    @common.Body() data: InstanceSpecificationCreateInput
  ): Promise<InstanceSpecification> {
    return await this.service.createInstanceSpecification({
      data: data,
      select: {
        additionalParameters: true,
        amiId: true,
        createdAt: true,
        id: true,
        instanceType: true,
        keyName: true,
        region: true,
        securityGroupIds: true,
        subnetId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InstanceSpecification] })
  @ApiNestedQuery(InstanceSpecificationFindManyArgs)
  async instanceSpecifications(
    @common.Req() request: Request
  ): Promise<InstanceSpecification[]> {
    const args = plainToClass(InstanceSpecificationFindManyArgs, request.query);
    return this.service.instanceSpecifications({
      ...args,
      select: {
        additionalParameters: true,
        amiId: true,
        createdAt: true,
        id: true,
        instanceType: true,
        keyName: true,
        region: true,
        securityGroupIds: true,
        subnetId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InstanceSpecification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async instanceSpecification(
    @common.Param() params: InstanceSpecificationWhereUniqueInput
  ): Promise<InstanceSpecification | null> {
    const result = await this.service.instanceSpecification({
      where: params,
      select: {
        additionalParameters: true,
        amiId: true,
        createdAt: true,
        id: true,
        instanceType: true,
        keyName: true,
        region: true,
        securityGroupIds: true,
        subnetId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InstanceSpecification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInstanceSpecification(
    @common.Param() params: InstanceSpecificationWhereUniqueInput,
    @common.Body() data: InstanceSpecificationUpdateInput
  ): Promise<InstanceSpecification | null> {
    try {
      return await this.service.updateInstanceSpecification({
        where: params,
        data: data,
        select: {
          additionalParameters: true,
          amiId: true,
          createdAt: true,
          id: true,
          instanceType: true,
          keyName: true,
          region: true,
          securityGroupIds: true,
          subnetId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InstanceSpecification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInstanceSpecification(
    @common.Param() params: InstanceSpecificationWhereUniqueInput
  ): Promise<InstanceSpecification | null> {
    try {
      return await this.service.deleteInstanceSpecification({
        where: params,
        select: {
          additionalParameters: true,
          amiId: true,
          createdAt: true,
          id: true,
          instanceType: true,
          keyName: true,
          region: true,
          securityGroupIds: true,
          subnetId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/minecraftServers")
  @ApiNestedQuery(MinecraftServerFindManyArgs)
  async findMinecraftServers(
    @common.Req() request: Request,
    @common.Param() params: InstanceSpecificationWhereUniqueInput
  ): Promise<MinecraftServer[]> {
    const query = plainToClass(MinecraftServerFindManyArgs, request.query);
    const results = await this.service.findMinecraftServers(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        instanceId: true,

        instanceSpecification: {
          select: {
            id: true,
          },
        },

        serverName: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/minecraftServers")
  async connectMinecraftServers(
    @common.Param() params: InstanceSpecificationWhereUniqueInput,
    @common.Body() body: MinecraftServerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      minecraftServers: {
        connect: body,
      },
    };
    await this.service.updateInstanceSpecification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/minecraftServers")
  async updateMinecraftServers(
    @common.Param() params: InstanceSpecificationWhereUniqueInput,
    @common.Body() body: MinecraftServerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      minecraftServers: {
        set: body,
      },
    };
    await this.service.updateInstanceSpecification({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/minecraftServers")
  async disconnectMinecraftServers(
    @common.Param() params: InstanceSpecificationWhereUniqueInput,
    @common.Body() body: MinecraftServerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      minecraftServers: {
        disconnect: body,
      },
    };
    await this.service.updateInstanceSpecification({
      where: params,
      data,
      select: { id: true },
    });
  }
}
